Program.Sub.ScreenSU.Start
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start


Variable.UDT.LASR.Define("Job",String,Job)
Variable.UDT.LASR.Define("Suffix",String,Suffix)
Variable.UDT.LASR.Define("Units_Complete",Float,Units_Complete)
Variable.UDT.LASR.Define("Units_Open",Float,Units_Open)
Variable.UDT.LASR.Define("Seq",String,Seq)
Variable.UDT.LASR.Define("Part",String)
Variable.UDT.LASR.Define("WC",String,WC)
Variable.UDT.LASR.Define("Description",String)
Variable.UDT.LASR.Define("Qty_order",Float)
Variable.UDT.LASR.Define("Job_Date_Due",Date)
Variable.UDT.LASR.Define("Customer",String)
Variable.UDT.LASR.Define("Flag_Hold",String)
Variable.UDT.LASR.Define("Exported",String)
Variable.UDT.LASR.Define("Drawing_Customer",String)
Variable.UDT.LASR.Define("Seq_Date_Due",Date,Seq_Date_Due)
Variable.UDT.LASR.Define("Name_Customer",String)
Variable.UDT.LASR.Define("Bin",String)
Variable.UDT.LASR.Define("Length",String)
Variable.UDT.LASR.Define("Width",String)
Variable.UDT.LASR.Define("Thickness",String)
Variable.UDT.LASR.Define("Material",String)
Variable.UDT.LASR.Define("Alt_Description",String)
Variable.UDT.LASR.Define("Priority",Long)
Variable.UDT.LASR.Define("Mat_Seq",String)
Variable.UDT.LASR.Define("Part_Customer",String)
Variable.uGlobal.uLASR.Declare("LASR")

Variable.UDT.Wkcntr.Define("Machine",String,Machine)
Variable.uGlobal.uWkcntr.Declare("Wkcntr")

Variable.Global.sProvider.Declare(String)
Variable.Global.sServer.Declare(String)
Variable.Global.sDatabase.Declare(String)
Variable.Global.sUID.Declare(String)
Variable.Global.sPWD.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start


'//************************************************************************************************************
' An SN84 transaction is the transaction used to refresh the open job requirements list, in Sigma Nest.
' data will be sent to SN in a 65 field comma delimited txt file.
' Only create the file, after all data is found.  This script uses a StringToFile, or you could write
' line by line to a temp file, then copy it to the final output file.
'***********************************************************************************************************//

' verify the license
'F.Intrinsic.Control.CallSub(Licenseverification)
' find the path to write the files
F.Intrinsic.Control.CallSub(Filepath)
' run the process
F.Intrinsic.Control.CallSub(Sn84,"FILELOC",V.Args.FILELOC)
' end the script
F.Intrinsic.Control.End



Program.Sub.Main.End

Program.Sub.SN84.Start
F.Intrinsic.Control.SetErrorHandler("SN84_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

V.Local.hold.Declare(String)
V.Local.export.Declare(String)
V.Local.sSel.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sRetB.Declare(String)
V.Local.sWO.Declare(String)
V.Local.sRev.Declare(String)
V.Local.sPart.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.sSigmaNestPart.Declare(String)
V.Local.sGSSPart.Declare(String)
V.Local.FileName.Declare(String)
V.Local.date.Declare(String)
V.Local.Time.Declare(String)
V.Local.Name.Declare(String)
V.Local.sData.Declare(String)
V.Local.sLocation.Declare(String)
V.Local.dDate.Declare(Date)
V.Local.sLogin.Declare(String)
V.Local.sSNWO.Declare(String)
V.Local.sSNSuf.Declare(String)
V.Local.sSNSeq.Declare(String)

'add 17 days to today for our cutoff date
F.Intrinsic.Date.DateAdd("d",17,V.Ambient.Date,V.Local.dDate)

' Opening the data connection, here to save system resouces.  It doesn't need tobe Open, while the process is sleeping
Function.Odbc.Connection!Conx.Openconnection(Variable.Ambient.pDSN,Variable.Ambient.PUser,Variable.Ambient.PPass,18000)
'open data connection to Sigma Nest
F.Intrinsic.String.Build("Provider={0};Server={1};Database={2};Uid={3};Pwd={4};",V.Global.sProvider,V.Global.sServer,V.Global.sDatabase,V.Global.sUID,V.Global.sPWD,V.Local.sLogin)
F.ODBC.Connection!ConSN.OpenConnection(V.Local.sLogin)

' get a list of Open Labor Sequences
F.Intrinsic.String.Concat("select Job, Suffix, Seq, Part as WC, Date_Due as Seq_Date_Due, Units_Open, Units_Complete from v_Job_Operations where Part = '250' and  Seq < '995000' and LMO='L' and Flag_Closed<>'Y' and Flag_Set_up<>'Y' and Date_Due <= '",V.Local.dDate.PervasiveDate,"' order by Job, Suffix, Seq","",V.Local.sSel)
F.ODBC.Connection!Conx.OpenRecordsetRO("rstSel",V.Local.sSel)
	F.Intrinsic.Variable.LoadUDTFromRecordset("Conx","rstSel","v.uGlobal.uLASR",False,1000)
F.ODBC.Conx!rstSel.Close

' collected all open L seq, but we only need sequences that go to a workcenter that has been flagged as a Nesting Interface workcenter
' get list of Nesting Interface workcenterd
V.uGlobal.uWkcntr.Redim(-1,-1)
F.ODBC.Connection!Conx.OpenRecordsetRO("rstSel","select Machine from Workcenters where Nesting_Intrfc ='Y'")
	F.Intrinsic.Control.If(V.ODBC.Conx!rstSel.EOF,=,False)
		F.Intrinsic.Variable.LoadUDTFromRecordset("Conx","rstSel","v.uGlobal.uWkcntr",False,1000)
	F.Intrinsic.Control.EndIf
F.ODBC.Conx!rstSel.Close

' flag all labor sequences, then unflag all with a Nesting Interface workcenter.
F.Intrinsic.Variable.UDTFlagAll(V.uGlobal.uLASR)
F.Intrinsic.Control.For(V.Local.iFor,V.uGlobal.uWkcntr!Machine.LBound,V.uGlobal.uWkcntr!Machine.UBound,1)
	F.Intrinsic.Variable.UDTMultiUnFlag(V.uGlobal.uLASR!WC,V.uGlobal.uWkcntr(v.Local.iFor)!Machine)
F.Intrinsic.Control.Next(V.Local.iFor)
' delete all  that are left flagged
F.Intrinsic.Variable.UDTDeleteFlagged(V.uGlobal.uLASR)
' if no Labor sequnces are left, exit the sub
F.Intrinsic.Control.If(V.uGlobal.uLASR!Job.UBound,=,-1)
	F.Intrinsic.Control.GoTo("EXIT")
F.Intrinsic.Control.EndIf

'Loop through the uLASR UDT and flag all of the job suffix seq that we find in SN table
'F.ODBC.Connection!ConSN.OpenLocalRecordsetRO("rstSN","SELECT WONUMBER, QTYORDERED, DUEDATE FROM PART")
F.ODBC.Connection!ConSN.OpenLocalRecordsetRO("rstSN","SELECT WONUMBER, QTYORDERED, substring(cast(cast(duedate as date) as varchar),6,2)+'/'+right(cast(cast(duedate as date) as varchar),2)+'/'+left(cast(cast(duedate as date) as varchar),4) as DUEDATE FROM PART")
'F.ODBC.Connection!Conx.OpenLocalRecordsetRO("rstSN","SELECT WONUMBER FROM WO")
F.Intrinsic.Control.DoUntil(V.ODBC.ConSN!rstSN.EOF,=,True)
	'we need to split the wo
	F.Intrinsic.String.Split(V.ODBC.ConSN!rstSN.FieldValTrim!WONUMBER,"-",V.Local.sSNWO)
	V.Local.sSNWO.RedimPreserve(0,1)
	'we need to split the suf seq
	F.Intrinsic.String.Split(V.Local.sSNWO(1),":",V.Local.sSNSuf)
	V.Local.sSNSuf.RedimPreserve(0,1)
	V.Local.sSNSeq.Set(V.Local.sSNSuf(1))
	V.Local.sSNWO.RedimPreserve(0,0)
	V.Local.sSNSuf.RedimPreserve(0,0)
	V.Local.sSNSeq.RedimPreserve(0,0)

'	F.Intrinsic.Variable.UDTMultiFlag(V.uGlobal.uLASR!Job,V.Local.sSNWO,V.uGlobal.uLASR!Suffix,V.Local.sSNSuf,V.uGlobal.uLASR!Seq,V.Local.sSNSeq,V.uGlobal.uLASR!Qty_order,V.ODBC.ConSN!rstSN.FieldValTrim!QTYORDERED,V.uGlobal.uLASR!Seq_Date_Due,V.ODBC.ConSN!rstSN.FieldValTrim!DUEDATE)
	F.Intrinsic.String.Build("SELECT QTY_ORDER FROM V_JOB_HEADER WHERE JOB = '{0}' AND SUFFIX = '{1}' ",V.uGlobal.uLASR!Job.Trim,V.uGlobal.uLASR!Suffix.Trim,V.Local.sSel)
	F.ODBC.Connection!Conx.OpenLocalRecordsetRO("rstQty",V.Local.sSel)
	F.Intrinsic.Control.If(V.ODBC.Conx!rstQty.EOF,=,False)
		F.Intrinsic.Control.If(V.ODBC.Conx!rstQty.FieldValFloat!QTY_ORDER,=,V.ODBC.ConSN!rstSN.FieldValFloat!QTYORDERED)
			F.Intrinsic.Variable.UDTMultiFlag(V.uGlobal.uLASR!Job,V.Local.sSNWO,V.uGlobal.uLASR!Suffix,V.Local.sSNSuf,V.uGlobal.uLASR!Seq,V.Local.sSNSeq,V.uGlobal.uLASR!Seq_Date_Due,V.ODBC.ConSN!rstSN.FieldValTrim!DUEDATE)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	F.ODBC.Conx!rstQty.Close
	F.ODBC.ConSN!rstSN.MoveNext
F.Intrinsic.Control.Loop
F.ODBC.ConSN!rstSN.Close
'delete all flagged because we already have them
F.Intrinsic.Variable.UDTDeleteFlagged(V.uGlobal.uLASR)

'if no labor sequences are left exit the sub
F.Intrinsic.Control.If(V.uGlobal.uLASR!Job.UBound,=,-1)
	F.Intrinsic.Control.GoTo("EXIT")
F.Intrinsic.Control.EndIf

F.Intrinsic.Debug.Stop

' data from all found sequences will be written to the utput file
F.Intrinsic.Control.For(V.Local.iFor,V.uGlobal.uLASR!Job.LBound,V.uGlobal.uLASR!Job.UBound,1)

	' set the number of columns required, but clear the variable, first
	V.Local.export.Redim(-1,-1)
	V.Local.export.Redim(0,64)

	' select item information from the Job_Header; specify Job and Suffix for reference
	F.Intrinsic.String.Build("select distinct Job,Suffix, Part, Description, QTY_Order, Date_Due as Job_Date_Due, Customer, Priority, Flag_Hold, Exported, Drawing_Customer, Router, Location  from V_Job_Header  where Job='{0}' and Suffix = '{1}' and year(Date_Closed)='1900' ",V.uGlobal.uLASR(v.Local.iFor)!Job,V.uGlobal.uLASR(v.Local.iFor)!Suffix,V.Local.sSel)
	F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sRet)

	' only do the rest, if valid Header information is found
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
		V.Local.sRet.RedimPreserve(0,12)
		V.Local.sLocation.Set(V.Local.sRet(12))

		' Description
		' SN can't handle the double quotes, so they are replaced by quadquotes
		F.Intrinsic.String.Replace(V.Local.sRet(3),V.Ambient.DblQuote,V.Ambient.QuadQuote,V.uGlobal.uLASR(v.Local.iFor)!Description)

		' GSS Part
		' SN will need some characters stripped from the part number.  The part as it comes from GSS will be written to a user field, to be stored for the feedback
		V.Local.sGSSPart.Set(V.Local.sRet(2))

		' split part to part and rev.  trim each and concatenat
		F.Intrinsic.String.RPad(V.Local.sGSSPart," ",20,V.Local.sGSSPart)
		F.Intrinsic.String.Right(V.Local.sGSSPart,3,V.Local.sRev)
		F.Intrinsic.String.Left(V.Local.sGSSPart,17,V.Local.sPart)

		' set header vluies to udt
		V.uGlobal.uLASR(v.Local.iFor)!Qty_order.Set(V.Local.sRet(4))
		V.uGlobal.uLASR(v.Local.iFor)!Job_Date_Due.Set(V.Local.sRet(5))
		V.uGlobal.uLASR(v.Local.iFor)!Customer.Set(V.Local.sRet(6))
		V.uGlobal.uLASR(v.Local.iFor)!Priority.Set(V.Local.sRet(7))
		V.uGlobal.uLASR(v.Local.iFor)!Flag_Hold.Set(V.Local.sRet(8))
		V.uGlobal.uLASR(v.Local.iFor)!Exported.Set(V.Local.sRet(9))
		V.uGlobal.uLASR(v.Local.iFor)!Drawing_Customer.Set(V.Local.sRet(10))

		F.Intrinsic.String.Concat("select distinct Part_Customer from v_Router_Header where Router = '",V.Local.sRet(11),"' ",V.Local.sSel)
		F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sRetB)
		F.Intrinsic.String.Split(V.Local.sRetB,"#$#",V.Local.sRetB)
		F.Intrinsic.String.Split(V.Local.sRetB(0),"*!*",V.Local.sretB)
		V.uGlobal.uLASR(v.Local.iFor)!Part_Customer.Set(V.Local.sRetB(0))

		' SN sets priority opposite GSS.
		' Subtract Prioriy from 1000 to reverse the Priority sequence. for SigmaNest
		F.Intrinsic.Math.Sub(1000,V.uGlobal.uLASR(v.Local.iFor)!Priority,V.uGlobal.uLASR(v.Local.iFor)!Priority)
' =====================   GET SN PPART FROM INV CROSS REF
'		' replace explicit characters with an underscore, for the SN version of the Part-- ( ) / \ : ; " ' ? ! , . ? @ & % * + $ # =
'		F.Intrinsic.String.Replace(V.Local.sPart,"(","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,")","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"/","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"\","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,":","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,";","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,V.Ambient.DblQuote,"_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"'","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"?","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"!","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,",","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,".","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"@","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"&","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"%","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"*","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"+","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"$","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"#","_",V.Local.sSigmaNestPart)
'		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart,"=","_",V.Local.sSigmaNestPart)


		' only need to replace the double quote, for the GSS version of the Part that will be stored in a user field.
		F.Intrinsic.String.Replace(V.Local.sGSSPart,"'","''",V.Local.sGSSPart)
		F.Intrinsic.String.Replace(V.Local.sGSSPart,V.Ambient.DblQuote,V.Ambient.QuadQuote,V.Local.sGSSPart)

		' SN part
		F.Intrinsic.String.Build("select User_Defined_Part from Inv_Cross_Ref where Part = '{0}' and Location = '{1}' ",V.Local.sGSSPart,V.Local.sLocation,V.Local.sSel)
		F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sSigmaNestPart)

		' if the Part has a Rev, indicate the Rev using a ~ delimiter
		F.Intrinsic.Control.If(V.Local.sRev.Trim,<>,"")
'			F.Intrinsic.String.Concat(V.Local.sSigmaNestPart.Trim,"~",V.Local.sRev.Trim,V.Local.sSigmaNestPart)
			F.Intrinsic.String.Concat(V.Local.sPart,"~",V.Local.sRev.Trim,V.Local.sPart)
		F.Intrinsic.Control.EndIf
			
		' get Customer Name
		F.Intrinsic.String.Concat("select distinct Name_Customer from V_Customer_Master where Customer='",V.uGlobal.uLASR(v.Local.iFor)!Customer,"'",V.Local.sSel)
		F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sRetB)
		F.Intrinsic.Control.If(V.Local.sRetB.Trim,<>,"")
			F.Intrinsic.String.Split(V.Local.sRetB,"*!*",V.Local.sRetB)
			V.Local.sRetB.RedimPreserve(0,0)
			V.uGlobal.uLASR(v.Local.iFor)!Name_Customer.Set(V.Local.sRetB(0).Trim)
		F.Intrinsic.Control.EndIf

		' get Part information
		' NOTE: I have not setup this process to run with specific lot/bin parts
		F.Intrinsic.String.Build("select Bin from V_Inventory_Mstr where Part = '{0}' and Location = '{1}'",V.Local.sGSSPart,V.Local.sLocation,V.Local.sSel)
		F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sRetB)
		F.Intrinsic.Control.If(V.Local.sRetB.Trim,<>,"")
			F.Intrinsic.String.Split(V.Local.sRetB,"*!*",V.Local.sRetB)
			V.Local.sRetB.RedimPreserve(0,0)
			V.uGlobal.uLASR(v.Local.iFor)!Bin.Set(V.Local.sRetB(0))
		F.Intrinsic.Control.EndIf

		F.Intrinsic.String.Build("select Description_3,Length,Width from V_Inventory_Mst2 where Part = '{0}' and Location = '{1}'",V.Local.sGSSPart,V.Local.sLocation,V.Local.sSel)
		F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sRetB)
		F.Intrinsic.Control.If(V.Local.sRetB.Trim,<>,"")
			F.Intrinsic.String.Split(V.Local.sRetB,"*!*",V.Local.sRetB)
			V.Local.sRetB.RedimPreserve(0,2)
			V.uGlobal.uLASR(v.Local.iFor)!Alt_Description.Set(V.Local.sRetB(0))
			V.uGlobal.uLASR(v.Local.iFor)!Length.Set(V.Local.sRetB(1))
			V.uGlobal.uLASR(v.Local.iFor)!Width.Set(V.Local.sRetB(2))
		F.Intrinsic.Control.EndIf

		F.Intrinsic.String.Build("select ISNULL(Thickness,'0.0000') from V_Inventory_Mst3 where Part = '{0}' and Location = '{1}' ",V.Local.sGSSPart,V.Local.sLocation,V.Local.sSel)
		F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sRetB)
		F.Intrinsic.Control.If(V.Local.sRetB.Trim,<>,"")
			V.Local.sRetB.RedimPreserve(0,0)
			F.Intrinsic.String.Split(V.Local.sRetB,"*!*",V.Local.sRetB)
			V.uGlobal.uLASR(v.Local.iFor)!Thickness.Set(V.Local.sRetB(0))
		F.Intrinsic.Control.EndIf

		' Raw Material
		' This script is assuming the Raw Material, for the Nesting Labor sequence, will be the M sequence, immediately preceding the Nesting L sequence
		F.Intrinsic.String.Concat("select  TOP 1 Part,Seq from Job_Operations  where LMO='M' and Job='",V.uGlobal.uLASR(v.Local.iFor)!Job,"'and Suffix='",V.uGlobal.uLASR(v.Local.iFor)!Suffix,"' and Seq<'",V.uGlobal.uLASR(v.Local.iFor)!Seq,"' order by Seq asc","",V.Local.sSel)
		F.ODBC.Connection!Conx.ExecuteAndReturn(V.Local.sSel,V.Local.sRetB)
		F.Intrinsic.Control.If(V.Local.sRetB.Trim,<>,"")
			F.Intrinsic.String.Split(V.Local.sRetB(0),"*!*",V.Local.sRetB)
			V.Local.sRetB.RedimPreserve(0,1)
			V.uGlobal.uLASR(v.Local.iFor)!Material.Set(V.Local.sRetB(0))
			V.uGlobal.uLASR(v.Local.iFor)!Mat_Seq.Set(V.Local.sRetB(1))
		F.Intrinsic.Control.EndIf

		' the full workorder in SN is formatted as Job-Suffix:Sequence
		F.Intrinsic.String.Concat(V.uGlobal.uLASR(v.Local.iFor)!Job.Trim,"-",V.uGlobal.uLASR(v.Local.iFor)!Suffix.Trim,":",V.uGlobal.uLASR(v.Local.iFor)!Mat_Seq.Trim,V.Local.sWO)

		' assign values to each element of the file array
		V.Local.export(0).Set("SN84")
		V.Local.export(1).Set(1)
		V.Local.export(3).Set(V.Local.sWO.Trim)
		F.Intrinsic.String.Replace(V.Local.sSigmaNestPart.Trim,V.Ambient.DblQuote,V.Ambient.QuadQuote,V.Local.sSigmaNestPart)
		V.Local.export(4).Set(V.Local.sSigmaNestPart)
		V.Local.export(5).Set(V.uGlobal.uLASR(v.Local.iFor)!Qty_order)
		F.Intrinsic.String.Replace(V.uGlobal.uLASR(v.Local.iFor)!Alt_Description,V.Ambient.DblQuote,V.Ambient.QuadQuote,V.uGlobal.uLASR(v.Local.iFor)!Alt_Description)
		V.Local.export(6).Set(V.uGlobal.uLASR(v.Local.iFor)!Alt_Description.Trim)
		V.Local.export(7).Set(V.uGlobal.uLASR(v.Local.iFor)!Thickness.Trim)
		V.Local.export(8).Set(V.uGlobal.uLASR(v.Local.iFor)!Seq_Date_Due)
		F.Intrinsic.String.Replace(V.uGlobal.uLASR(v.Local.iFor)!Name_Customer,V.Ambient.DblQuote,V.Ambient.QuadQuote,V.uGlobal.uLASR(v.Local.iFor)!Name_Customer)
		V.Local.export(9).Set(V.uGlobal.uLASR(v.Local.iFor)!Name_Customer.Trim)
		V.Local.export(10).Set(V.uGlobal.uLASR(v.Local.iFor)!Drawing_Customer)
		V.Local.export(11).Set(V.uGlobal.uLASR(v.Local.iFor)!Priority.Trim)
		V.Local.export(14).Set(V.uGlobal.uLASR(v.Local.iFor)!Length.Trim)
		V.Local.export(15).Set(V.uGlobal.uLASR(v.Local.iFor)!Width.Trim)
		V.Local.export(16).Set(V.uGlobal.uLASR(v.Local.iFor)!Description)
		V.Local.export(17).Set(V.Local.sRev.Trim)
		V.local.export(21).set(V.uGlobal.uLASR(v.Local.iFor)!Flag_Hold)
		V.Local.export(23).Set(V.uGlobal.uLASR(v.Local.iFor)!Bin.Trim)
		V.local.export(26).set(V.uGlobal.uLASR(v.Local.iFor)!Material.Trim)
		V.local.export(27).set(V.Local.sGSSPart.Trim)
		V.Local.export(35).Set(V.uGlobal.uLASR(v.Local.iFor)!WC.Trim)
		V.Local.export(56).Set(V.uGlobal.uLASR(v.Local.iFor)!Material.Trim)
		V.Local.export(57).Set(V.Local.sSigmaNestPart.Trim)
	F.Intrinsic.Control.EndIf

	' join all array elements for the current job record, into a single line
	' the transfered file is a .txt, but text fields still need double quotes, in case theycontain commas
	V.Local.hold.Set("")
	F.Intrinsic.Control.If(V.Local.export(0).Trim,<>,"")
		F.Intrinsic.String.JoinCSV(V.Local.export,False,V.Local.hold)
		F.Intrinsic.String.Concat(V.Local.sData,V.Local.hold,V.Ambient.NewLine,V.Local.sData)
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.iFor)

F.Intrinsic.Debug.Stop

' write the data to the output file
' the output file can be anywhere that the processing computer can map to.
' usually the final path will be \SimTrans\FileConversion\FileInput\
F.Intrinsic.String.DateString(V.Ambient.Now,V.Local.date)
F.Intrinsic.String.TimeString(V.Ambient.Now,V.Local.time)
F.Intrinsic.String.Concat(V.Local.date,V.Local.time,V.Local.name)
F.Intrinsic.String.Build("{0}\{1}{2}.txt",V.Args.FILELOC,V.Local.date,V.Local.Time,V.Local.FileName)
F.Intrinsic.File.String2File(V.Local.FileName,V.Local.sData)

F.Intrinsic.Control.Label("EXIT")

F.Intrinsic.Debug.Stop

' close the data connection
F.ODBC.Connection!Conx.Close
F.ODBC.Connection!ConSN.Close




F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("SN84_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4257_GSS_To_SigmaNest-JOR-MAC.gas",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.SN84.End

Program.Sub.Unload.Start

F.ODBC.Connection!Conx.close
F.Intrinsic.Control.End


Program.Sub.Unload.End

Program.Sub.LicenseVerification.Start

V.Local.bLicensed.Declare(Boolean)

' if license is not found, the script will end
f.Global.General.IsLicensedByModuleName("NES",v.Local.bLicensed)
F.Intrinsic.Control.If(V.Local.bLicensed,=,False)
	F.Intrinsic.UI.Msgbox("Not Licensed for Nesting Integrations")
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf


Program.Sub.LicenseVerification.End

Program.Sub.FilePath.Start

V.Local.sSel.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sHold.Declare(String)
V.Local.sVal.Declare(String)
V.Local.bRet.Declare(Boolean)
V.Local.sFile.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.iFoundRecs.Declare(Long)


' see if the credential file is found
F.Intrinsic.String.Build("{0}\SNLIC.dat",V.Caller.FilesDir,V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bRet)

' if the file is found, look for the INPUT line
F.Intrinsic.Control.If(V.Local.bRet,=,True)
	F.Intrinsic.File.File2String(V.Local.sFile,V.Local.sRet)
	F.Intrinsic.String.Split(V.Local.sRet,V.Ambient.NewLine,V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iFor,V.Local.sRet.LBound,V.Local.sRet.UBound,1)
		F.Intrinsic.String.Split(V.Local.sRet(v.Local.iFor),"::",V.Local.sHold)
		V.Local.sHold.RedimPreserve(0,1)
		F.Intrinsic.Control.SelectCase(V.Local.sHold(0))
		F.Intrinsic.Control.Case("INPUT")
			V.Local.sVal.Set(V.Local.sHold(1))
'			F.Intrinsic.Control.ExitFor(V.Local.iFor)
		F.Intrinsic.Control.Case("PROVIDER")
			V.Global.sProvider.Set(V.Local.sHold(1))
			F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
		F.Intrinsic.Control.Case("SERVER")
			V.Global.sServer.Set(V.Local.sHold(1))
			F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
		F.Intrinsic.Control.Case("DATABASE")
			V.Global.sDatabase.Set(V.Local.sHold(1))
			F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
		F.Intrinsic.Control.Case("UID")
			V.Global.sUID.Set(V.Local.sHold(1))
			F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
		F.Intrinsic.Control.Case("PWD")
			V.Global.sPWD.Set(V.Local.sHold(1))
			F.Intrinsic.Math.Add(V.Local.iFoundRecs,1,V.Local.iFoundRecs)
		F.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.Next(V.Local.iFor)
F.Intrinsic.Control.EndIf

' if the path is found,send it back.  otherwise end the script
F.Intrinsic.Control.If(V.Local.iFoundRecs,<>,5)
	F.Intrinsic.UI.Msgbox("Data connection credentials not found.")
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

' if the path is found,send it back.  otherwise end the script
F.Intrinsic.Control.If(V.Local.sVal,=,"")
	F.Intrinsic.UI.Msgbox("INPUT file path not found.")
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("FILELOC",V.Local.sVal)


Program.Sub.FilePath.End


